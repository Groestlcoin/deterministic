image: registry.gitlab.com/hybrix/hybrixd/base-images/build-image:stable

variables:
  GIT_STRATEGY: none

stages:
 - build-deterministic
 - test

deterministic:
  cache: {}
  stage: build-deterministic
  script:

    # Because of race conditions with merge squashes leaving broken references we circumvent the default git strategy GIT_STRATEGY: none
    - cd ..
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/client/modules/deterministic.git --depth 10 --single-branch --branch $CI_COMMIT_REF_NAME"
    - cd deterministic
    - if git log | grep $CI_COMMIT_SHA; then
    -   echo "Commit $CI_COMMIT_SHA exists, retrieving it."
    -   "git -c advice.detachedHead=false checkout $CI_COMMIT_SHA"
    - else
    -   echo "Commit $CI_COMMIT_SHA does not exist, retrieving latest in branch $CI_COMMIT_REF_NAME"
    -   "git checkout"
    - fi
    - cd ..
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/common.git --depth 10 --single-branch --branch master"
    - cd common
    - "git checkout"
    - cd ../deterministic

    # compile in release mode (uglified and minified)
    - sh ./scripts/npm/compile.sh
    - sh ./scripts/pipeline/clean.sh

  artifacts:
    paths:
      - ./*

test:
  cache: {}
  stage: test
  script:
    - echo "[.] Stash deterministic build"
    - mkdir -p /tmp/deterministic
    - mv * /tmp/deterministic
    - echo "[.] Get deterministic scripts (and the rest)"
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/client/modules/deterministic.git --depth 10 --single-branch --branch $CI_COMMIT_REF_NAME"
    - cd deterministic
    - if git log | grep $CI_COMMIT_SHA; then
    -   echo "Commit $CI_COMMIT_SHA exists, retrieving it."
    -   "git -c advice.detachedHead=false checkout $CI_COMMIT_SHA"
    - else
    -   echo "Commit $CI_COMMIT_SHA does not exist, retrieving latest in branch $CI_COMMIT_REF_NAME"
    -   "git checkout"
    - fi
    - cd ..
    - echo "[.] Get hybrixd node"
    - sh deterministic/scripts/pipeline/build.sh
    - echo "[.] Move deterministic files"
    - mv /tmp/deterministic ./modules/deterministic
    - echo "[.] Execute test script"
    - sh ./scripts/pipeline/test.sh
    - echo "[.] Done"
  coverage: /SUCCESS RATE[^|]*\:[^|]*\s+([\d\.]+)/
  dependencies:
    - deterministic
  artifacts:
    reports:
      junit: test*.xml